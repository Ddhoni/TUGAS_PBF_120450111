# -*- coding: utf-8 -*-
"""PBF_Exercise4_SimpleFBG_MUHAMMAD DHONI APRIYADI_120450111.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OmDCnRfM-ZoitHeolJhyknTp3CwIpPRL

Author : MUHAMMAD DHONI APRIYADI
NIM : 120450111
Affiliation : Sains Data ITERA
Program Description : Simple Football Game
"""

#Author : MUHAMMAD DHONI APRIYADI
#NIM : 120450111
#Affiliation : Sains Data ITERA
#Program Description : Simple Football Game

import random
import math
#Lambda value for higher rated team dengan menggunakan distribusi poisson
lamb_One = 1.148698355
#Lambda value for lower rated team
lamb_Two = 0.8705505633

#Distribusi Poisson digunakkan dalam menghitung gol yang dicetak oleh Home (tuanrumah)
def homeMatch(home_Rating,away_Rating):
    global lamb_One
    global x
    global y
    if x == y:
        raise ValueError
    else:
        lamb = lamb_One**(int(home_Rating)-int(away_Rating))
        homeScore = 0
        z = random.random()    
        while z > 0:
            z = z - ((lamb**homeScore * math.exp(lamb * -1))/(math.factorial(homeScore)))
            homeScore += 1
        return (homeScore-1)

#Distribusi Poisson menghitung gol yang dicetak oleh tim tandang (away)
def awayMatch(home_Rating,away_Rating):
    global lamb_Two
    global x
    global y

    if x == y:
        raise ValueError
    else:
        lamb = lamb_Two**(int(home_Rating)-int(away_Rating))
        awayScore = 0
        z = random.random()    
        while z > 0:
            z = z - ((lamb**awayScore * math.exp(lamb * -1))/(math.factorial(awayScore)))
            awayScore += 1
        return (awayScore-1)


league_Size = int(input("Masukkan jumlah tim yang bertanding di Liga: "))

team_Names = []
team_Skill = []
team_Points = []
team_For = []
team_Against = []
team_Wins = []
team_Draws = []
team_Losses = []

for x in range(league_Size):
    team_Points += [0]
    team_For += [0]
    team_Against += [0]
    team_Wins += [0]
    team_Draws += [0]
    team_Losses += [0]

#Input nama dan skill rating kepada setiap tim
for i in range(league_Size):
    team_Names += [input("Enter team "+str(i+1)+" name: ")]
for j in range(league_Size):
    team_Skill += [input("Enter "+team_Names[j]+" skill: ")]

#Menginisialisasi sebuah variable yang akan digunakan
homeScore = 0
awayScore = 0

#Permainan dimulai dengan menggunakan range
for x in range(league_Size):
    #input("Press enter to continue ")
    print("===========================================")
    print(team_Names[x]+"'s home games: ")
    print("===========================================\n")
    for y in range(league_Size):
        error = 0
        try:
            homeScore = homeMatch(team_Skill[x],team_Skill[y])
        #Skipping a game to stop a team playing itself
        except ValueError:
            pass
            error += 1
        try:
            awayScore = awayMatch(team_Skill[x],team_Skill[y])
        except ValueError:
            pass
        if error == 0:
            #memperbarui dan updating lists
            print(team_Names[x],homeScore,"-",awayScore,team_Names[y],"\n")
            team_For[x] += homeScore
            team_For[y] += awayScore
            team_Against[x] += awayScore
            team_Against[y] += homeScore
            if homeScore > awayScore:
                team_Wins[x] += 1
                team_Losses[y] += 1
                team_Points[x] += 3
            elif homeScore == awayScore:
                team_Draws[x] += 1
                team_Draws[y] += 1
                team_Points[x] += 1
                team_Points[y] += 1
            else:
                team_Wins[y] += 1
                team_Losses[x] += 1
                team_Points[y] += 3
        else:
            pass

#Printing table (unsorted)
print("Hasil Akhir : ")
for x in range(league_Size):
    #Lots of formatting
    print(team_Names[x]+(15-len(team_Names[x]))*" "+" Skill: "+str(team_Skill[x])+(5-len(str(team_Skill[x])))*" "+" Points: "+str(team_Points[x])+(5-len(str(team_Points[x])))*" "+" For: "+str(team_For[x])+(5-len(str(team_For[x])))*" "+" Against: "+str(team_Against[x])+(5-len(str(team_Points[x])))*" "+" Goal difference: "+str(team_For[x]-team_Against[x])+(5-len(str(team_For[x]-team_Against[x])))*" "+" Wins: "+str(team_Wins[x])+(5-len(str(team_Wins[x])))*" "+" Draws: "+str(team_Draws[x])+(5-len(str(team_Draws[x])))*" "+" Losses: "+str(team_Losses[x])+(5-len(str(team_Losses[x])))*" ")
team_Points.sort()
print(team_Points)